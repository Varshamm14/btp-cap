PROCEDURE "LOGIN_VALIDATION"(
    IN userName NVARCHAR(256), 
    IN user_password NVARCHAR(256),
    IN status TINYINT,  -- Adding status as an input parameter
    OUT EX_MESSAGE NVARCHAR(200)
)
AS 
BEGIN 
    -- Declare local variables
    DECLARE recordCount INTEGER := 0;
    DECLARE invalid CONDITION FOR SQL_ERROR_CODE 10001;

    -- Exception handler declarations
    DECLARE EXIT HANDLER FOR invalid
    BEGIN
        EX_MESSAGE := 'Invalid credentials or inactive user.' || ::SQL_ERROR_MESSAGE;
    END;

    -- Check if the user exists with the provided username and password, and if the status is active (1)
    SELECT COUNT(*) INTO recordCount 
    FROM "users" 
    WHERE "username" = :userName 
    AND "password" = :user_password 
    AND "status" = 1;  -- Only active users are allowed (status = 1)

    -- If the user is valid and active, insert the new data
    IF recordCount > 0 THEN
        -- Insert the user login details into the table
        INSERT INTO "users" ("username", "password", "status") 
        VALUES (:userName, :user_password, :status); -- Inserting provided values

        EX_MESSAGE := 'Authentication successful and data inserted';
    ELSE
        SIGNAL invalid;  -- If user doesn't exist or status is not 1, signal invalid credentials
    END IF;

END;
